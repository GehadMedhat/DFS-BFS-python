from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def DFS_util(self, v, visited):
        visited[v] = True
        print(v, end=' ')

        for neighbor in self.graph[v]:
            if not visited[neighbor]:
                self.DFS_util(neighbor, visited)

    def DFS(self, v):
        visited = [False] * (len(self.graph))
        self.DFS_util(v, visited)

    def BFS(self, s):
        visited = [False] * (len(self.graph))
        queue = []

        queue.append(s)
        visited[s] = True

        while queue:
            s = queue.pop(0)   

            print(s, end=' ')

            for i in self.graph[s]:
                if not visited[i]:
                    queue.append(i)
                    visited[i] = True   


# Example usage:
g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 2)
g.add_edge(2, 0)
g.add_edge(2, 3)
g.add_edge(3, 3)

print("Following is DFS   
 traversal (starting from vertex 2)")
g.DFS(2)

print("\nFollowing is BFS traversal (starting from vertex 2)")
g.BFS(2)
